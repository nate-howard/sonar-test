/*
 * lllifo.h - a dynamically-growing lifo
 * 
 * Author: Howdy Pierce/Lalit Pandit
 * 
 * DO NOT EDIT THIS FILE: You should check this file into your repo
 * exactly as it was delivered to you.
 */

#ifndef _LLLIFO_H_
#define _LLLIFO_H_

/* 
 * The lllifo's main data structure. 
 *
 * Defined here as an incomplete type, in order to hide the
 * implementation from the user. You will need to define this struct
 * in your .c file.
 */
typedef struct lllifo_s lllifo_t;


/*
 * Creates and initializes the LIFO
 *
 * Parameters:
 *   capacity  the initial size of the lifo, in number of elements. 
 *             Valid values are in the range of 0 to max_capacity(inclusive of both).
 *             max_capacity maximum capacity of the LIFO. Once the capacity equals
 *             max capacity, any further attempt to push will discard
 *             the oldest element and reuse that node for storing the
 *             newly pushd element. max_capacity > 0.
 * 
 * Returns: A pointer to a newly-created lllifo_t instance, or NULL in
 *   case of an error.
 */
lllifo_t *lllifo_create(int capacity, int max_capacity);


/*
 * Adds("pushs") an element onto the LIFO, growing the LIFO by adding
 * additional elements, if necessary upto max_capacity. Thereafter,
 * it will recycle the oldest node to push the recent data.
 *
 * Parameters:
 *   lifo    The lifo in question
 *   element The element to push, which cannot be NULL
 * 
 * Returns:
 *   The new length of the LIFO on success, -1 on failure. It is an error to attempt 
 *   to push the NULL pointer. Also, giving a NULL for lifo is an error.
 */
int lllifo_push(lllifo_t *lifo, void *element);


/*
 * Removes ("pops") an element from the LIFO, and returns it.
 *
 * Parameters:
 *   lifo  The lifo in question
 * 
 * Returns:
 *   The pop-ed element, or NULL if the LIFO was empty or if an error in parameters.
 */
void *lllifo_pop(lllifo_t *lifo);


/*
 * Returns the number of elements currently in the LIFO. 
 *
 * Parameters:
 *   lifo  The lifo in question
 * 
 * Returns:
 *   The number of elements currently on the LIFO.
 */
int lllifo_length(lllifo_t *lifo);


/*
 * Returns the LIFO's current capacity
 *
 * Parameters:
 *   lifo  The lifo in question
 * 
 * Returns:
 *   The current capacity, in number of elements, for the LIFO.
 */
int lllifo_capacity(lllifo_t *lifo);

/*
 * Returns the LIFO's max capacity
 *
 * Parameters:
 *   lifo  The lifo in question
 *
 * Returns:
 *   The max capacity, in number of elements, for the LIFO.
 */
int lllifo_max_capacity(lllifo_t *lifo);

/*
 * Teardown function: Frees all dynamically allocated
 * memory. After calling this function, the lifo should not be used
 * again!
 *
 * Parameters:
 *   lifo  The lifo in question
 * 
 * Returns: none
 */
void lllifo_destroy(lllifo_t *lifo);

/*
 * Reset function: Resets the length of the LIFO to 0 and basically
 * reclaims all nodes for further use. Capacity and Max_Capacity 
 * stay intact but the LIFO is cleared. 
 *
 * Parameters:
 *   lifo  The lifo in question
 * 
 * Returns: none
 */
void lllifo_reset(lllifo_t *lifo);

#endif // _LLLIFO_H_
